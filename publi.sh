#!/bin/sh

### {{{     Edit these config vars BEFORE you try to run the script !

###############################################################################
## You should probably edit anything uncommented, everything else is entirely
## optional. All options should be literal strings, ie. 'single-quoted'.
## A few variables you can use:
##	$NAME : The project name. 
##		we will take this from your conf.lua or, failing that, the dirname.
##		make sure you don't cause any side-effects or use love.filesystem 
##		without checking if it first exists!
##	$BRANCH : the current git branch, formatted as "-branchname"
##		if you are on the master branch or don't have a git repo,
##		we default to "".
##	$VERSION : the current git branch, formatted using `git describe --dirty`
##		like $BRANCH we default to "" if there is no repo.
###############################################################################

## where your windows binaries lie.

WINDIR='$HOME/src/love-0.8.0-win-x86'

## where you want to put the final builds.

FINALDIR='$HOME/Dropbox/Public/games/$NAME'

## If you aren't using git, don't worry about the branch and version numbers.
## If you are, then know that $BRANCH won't show on the master branch, and
## that $VERSION is generated by a ``git describe --dirty''

SRCPKG='${NAME}${BRANCH}${VERSION}.love'
WINPKG='${NAME}${BRANCH}${VERSION}-win32.zip'

## we will need to make a few temporary directories, and be warned: we don't 
## clean up after ourselves.

#TMPDIR="/tmp"

## if set, git will pull from the origin before packaging anything.
## WARNING : This only makes sense if your repo is a read-only mirror of 
## another one. As soon as you make any changes you're in for a world of hurt.

#AUTOPULL='yes'

## Delete/comment out this once you're absolutely sure you're done.

#NORUN="yes"

### }}} Options end here, everything else can be considered source code.

helpmsg=$(cat <<EOF
Usage: $0 [DIRNAME]\n
Packages DIRNAME, or the current directory if no DIRNAME is given, into some\n
neatly formatted binary packages. all OPTIONS can be found/edited by opening\n
up the source, they are clearly documented at the beginning of the script.\n
\n
To change an option for only one pass, do something like:\n
\tFOO="bar" $0 dir
EOF
)

case $1 in
	-h|--help)
		echo $helpmsg
		exit 0
		;;
	-v|--version)
		echo "No versioning here! Sorry."
		exit 0
		;;
	*)
		DIRNAME=$1
		;;	
esac

if [ "$NORUN" = "yes" ]; then
	echo "You forgot to give us defaults! open up $0 and get hacking." >&2
	exit 1
fi

# attempt to get identity from conf.lua
luascript='
	love = {} 
	dofile "conf.lua" 
	local t = {screen = {}, modules = {}} 
	love.conf(t) 
	if t.identity then 
		print("NAME=".. t.identity) 
	end
'
eval $(lua -e "$luascript")

cd ${DIRNAME:-.}
if [ -d ".git" ]; then
	gitrepo="yes"
	if [ "$AUTOPULL" = "yes" ]; then
		git pull -q
	fi
	BRANCH="-$(git symbolic-ref --short -q HEAD)"
	if [ "$BRANCH" = "master" ]; then BRANCH=""; fi
	VERSION="-$(git describe | sed -e 's/^v//g')" # rip off 'v' from 'v1.2.3'
fi

NAME=${NAME:-$(PWD##*/)} # default to the working dir

TMPDIR=${TMPDIR:-"/tmp"}

# XXX if the user undefines these then LOVE IS OVER
eval "WINDIR=$WINDIR"
eval "FINALDIR=$FINALDIR"
eval "SRCPKG=$SRCPKG"
eval "WINPKG=$WINPKG"

# Source
DOTLOVE="$FINALDIR/$SRCPKG"
echo creating $DOTLOVE
mkdir -p $FINALDIR

shopt -s globstar
shopt -s nullglob
for fname in **; do
	if [ "$gitrepo" = "yes" ]; then
		if git ls-files --error-unmatch "$fname" &> /dev/null; then
			zip -q "$DOTLOVE" "$fname"
		fi
	else
		zip -q "$DOTLOVE" "$fname"
	fi
done
shopt -u globstar
shopt -u nullglob

#zip -rq $DOTLOVE * # TODO: smart adding. we don't want .swp or .DS_STORE, etc.
 
# Win32
DOTEXE="$FINALDIR/$WINPKG"
TMPEXE="$TMPDIR/$WINPKG/$NAME"
echo creating $DOTEXE
rm -vr "$TMPEXE"
mkdir -p "$TMPEXE"
cd "$TMPEXE"
cp -r "$WINDIR/." "$TMPEXE" 
cat "$WINDIR/love.exe" "$DOTLOVE" > "${NAME}.exe"
rm "love.exe" # TODO: can't we just not copy it?
cd ..
zip -r "$DOTEXE" "."
 
