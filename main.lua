--libs/utilities
--[[
local ren = require "misc.renoise"
ren.load()

local tab = {}
tab['snd/bgm.mp3']  = {16, -1}
tab['snd/beep.wav'] = {2, 2}
tab['snd/me.wav']   = {0, 0}
tab['snd/you.wav']  = {1, 1}
tab['snd/dash.wav'] = {3, 3}
tab['snd/cd.wav']   = {4, 4}
tab['snd/go.wav']   = {5, 4}
ren.sounds(tab)
love.audio = ren
--]]

require "boilerplate"

ProFi:start()
local dump = require "misc.dump"
json = require "misc.dkjson"
local qu   = require "Quickie"

function reload(mod)
	package.loaded[mod] = nil
	return require(mod)
end
-- We load everything up as constants because dumb
balance         = require "balance"
colors          = require "colors"
Boolet          = require "boolet"
Powerup         = require "powerup"
MaxAmmo         = require "maxammo"
moves           = require "moves"
control         = require "control"
Dude            = require "player"
Shotgonner      = require "shotgun"
Game            = require "game"
Pause           = require "pausemenu"
packets         = reload  "packets"
CharacterSelect = require "charselect"

-- FIXME font management
minfnt = nil
fnt    = nil
hfnt   = nil

function love.load()
	love.keyboard.setKeyRepeat(.150, .050)

	minfnt = lg.newFont('font/Sansation_Regular.ttf', 15)
	fnt    = lg.newFont('font/Sansation_Regular.ttf', 20)
	hfnt   = lg.newFont('font/Sansation_Bold.ttf', 45)

	local all_callbacks = {
	'update', 'draw', 'focus', 'keypressed', 'keyreleased',
	'mousepressed', 'mousereleased' }

	Gamestate.registerEvents(all_callbacks)
	ProFi:stop()
	ProFi:writeReport('profile.log')
	Gamestate.switch(menu)
end


-- {{{ Me

menu = {}

function _fullscreen()
	if config.fullscreen then -- picks max res to save on ui effort
		local modes = love.graphics.getModes()
		table.sort(modes, function(a, b)
			return a.width*a.height > b.width*b.height
		end)
		local w, h = modes[1]['width'], modes[1]['height']
		lg.setMode(w, h, true, true, config.fsaa)
		config.fullscreenMode = {w, h}
	else
		local w, h = unpack(config.windowedMode)
		lg.setMode(w, h, false, true, config.fsaa)
	end
end

function menu:enter(prev, ...)
	-- pass
end

-- The function chaining is to feel DSL-ish. Usage: UIelem(bool "name " (var))
-- Looks similar to a lot of Lua class libraries, which is the point
-- It has special needs, yeah
local function bool(str)
	return function(b)
		return {text = str .. (b and "on" or "off"), size = {'tight'} }
	end
end

local function const(str)
	return {text = str, size = {'tight'} }
end

function menu:update(dt)
	local ti = 'tight'
	qu.group(
			{grow = 'down', pos = {10, 10}, size = {800, 040}, align = 'center'},
	function()
		if qu.Button(const "Start game") then
			Gamestate.switch(CharacterSelect())
		end

		if qu.Button(const "Join game") then
			CharacterSelect = reload "charselect"
			Gamestate.switch(CharacterSelect(), 'join')
		end

		if qu.Button(const "Host game") then
			packets         = reload  "packets"
			CharacterSelect = reload "charselect"
			Gamestate.switch(CharacterSelect(), 'host')
		end

		if qu.Button(bool "Bloom : " (config.bloom)) then
			config.bloom = not config.bloom
		end

		qu.group.push { grow = 'right' }
			if qu.Button(bool "Fullscreen : " (config.fullscreen)) then
				config.fullscreen = not config.fullscreen
			end

			if qu.Button(const "Apply") then
			  _fullscreen()
			end
		qu.group.pop {}

		if qu.Button(bool "Log replays : " (config.phoneHome)) then
			config.phoneHome = not config.phoneHome
	 	end

		if qu.Button(const "Quit") then
			love.event.push('quit')
		end
	end)
end

function menu:keypressed(key, uni)
	qu.keyboard.pressed(key, uni)
end

cc = [[
Suck my dick I'm a shark
I don't even need a massive controls list anymore :D
]]
function menu:draw()
	lg.setBackgroundColor(0, 0, 0)
	lg.setColor(255, 255, 255)
	lg.setFont(minfnt)
	qu.core.draw()
	lg.print(cc, 200, 10)
end
-- }}}


local preconf = [[
-------------------------------------------------------------------------------
-- This file is autogenerated and autosaved.
-- Feel free to edit it, 
--   but do not expect the same thing that went in to come out.
-- If you do want to make fancy changes try editing the source.
-------------------------------------------------------------------------------
return ]]

function love.quit()
	lfs.write("userconfig.lua", preconf .. dump.tostring(config))
end
